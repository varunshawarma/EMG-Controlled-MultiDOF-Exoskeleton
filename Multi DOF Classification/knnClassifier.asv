function [knnModel, accuracy, cvAccuracy] = knnClassifier(states, features)

data = [states' features'];
% Number of data points
nData = size(data, 1);

% Create a partition object for a random 70-30 split
c = cvpartition(nData, 'Holdout', 0.3);

% Indices for training and testing sets
trainIdx = training(c);
testIdx = test(c);

% Split the data
X_train = data(trainIdx, 2:end);  % Features for training
Y_train = data(trainIdx, 1);      % Labels for training
X_test = data(testIdx, 2:end);    % Features for testing
Y_test = data(testIdx, 1);        % Labels for testing

Train kNN model
k = 2;  % Number of neighbors
knnModel = fitcknn(X_train, Y_train, 'NumNeighbors', k, 'DistanceWeight', 'inverse');

Y_pred = predict(knnModel, X_test);
accuracy = sum(Y_pred == Y_test) / numel(Y_test);
%fprintf('Accuracy of the kNN model is: %.2f%%\n', accuracy * 100);

% Perform k-fold cross-validation
kFold = 10;
cvModel = crossval(knnModel, 'KFold', kFold);

% Assess the model's performance
cvAccuracy = 1 - kfoldLoss(cvModel, 'LossFun', 'ClassifError');
%fprintf('Cross-validated Accuracy is: %.2f%%\n', cvAccuracy * 100);

figure; % Create a new figure window
confusionchart(Y_test, Y_pred);
title('Confusion Matrix for Validation Data');

end
